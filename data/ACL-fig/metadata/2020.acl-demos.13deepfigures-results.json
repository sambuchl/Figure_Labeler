{"raw_detected_boxes": [[{"x2": 715.0, "y1": 321.0, "x1": 434.0, "y2": 483.0}], [], [{"x2": 717.0, "y1": 91.0, "x1": 110.0, "y2": 360.0}], [{"x2": 724.0, "y1": 91.0, "x1": 429.0, "y2": 226.0}, {"x2": 399.0, "y1": 97.0, "x1": 101.0, "y2": 389.0}], [], []], "raw_pdffigures_output": {"regionless-captions": [], "figures": [{"figType": "Figure", "name": "2", "captionBoundary": {"x2": 527.2904663085938, "y1": 277.9995422363281, "x1": 71.69100189208984, "y2": 343.7780456542969}, "imageText": [], "regionBoundary": {"x2": 526.0, "y1": 61.8900146484375, "x1": 72.0, "y2": 265.8900146484375}, "caption": "Figure 2: BENTO Web Interface. The interface can be roughly divided into three parts from left to right: tool panel, canvas panel and worksheet panel. The tool panel lists the current available tools organized in a tree view. The canvas panel contains the flowchart of the current pipeline. Every node represents a tool or dataset and each connection indicates the data flow in the pipeline.3 This figure shows an example of the pipeline for entity and relation extraction. The worksheet panel displays the content of the CodaLab worksheet such as bundles and their UUIDs.", "page": 2}, {"figType": "Figure", "name": "4", "captionBoundary": {"x2": 527.2003784179688, "y1": 177.35256958007812, "x1": 306.9169921875, "y2": 278.99700927734375}, "imageText": [], "regionBoundary": {"x2": 526.0, "y1": 61.8900146484375, "x1": 307.0, "y2": 165.8900146484375}, "caption": "Figure 4: The CodaLab commands generated from the pipeline in Figure 2. Two CodaLab commands are generated based on two steps in the pipeline, namely NER and relation extraction. The bundle dependency information is highlighted in orange and the shell commands are colorized in red. The results in the first step are saved in the variable bundle 0 (circled in blue squares), which is used as a bundle dependency in the command of the second step.", "page": 3}, {"figType": "Figure", "name": "3", "captionBoundary": {"x2": 292.008544921875, "y1": 295.0065612792969, "x1": 71.69100952148438, "y2": 396.6499938964844}, "imageText": [], "regionBoundary": {"x2": 290.0, "y1": 61.8900146484375, "x1": 72.0, "y2": 282.8900146484375}, "caption": "Figure 3: The CodaLang expression for the tool NER in Figure 2. The expression can be roughly split into three sections indicated by the dashed squares. The first section declares the arguments of this tool. As seen, the tool takes three bundles as inputs: config, input and pretrained model. The second section declares a constant code which is initialized with an existing bundle. The third section is a string template for generating the CodaLab command.", "page": 3}, {"figType": "Figure", "name": "1", "captionBoundary": {"x2": 527.2899780273438, "y1": 366.321533203125, "x1": 306.9469909667969, "y2": 456.0099182128906}, "imageText": [], "regionBoundary": {"x2": 525.0, "y1": 221.8900146484375, "x1": 307.0, "y2": 354.8900146484375}, "caption": "Figure 1: The architecture of BENTO. The BENTO back end stores the description files of various tools (e.g., pre-trained NLP models), processes static contents of the application and handles compilation of the user-defined pipelines. The CodaLab back end stores the datasets (bundles) and executes computational jobs. The two back end servers are brought behind a single domain name using a reverse proxy server.", "page": 0}]}, "figures": [{"page_width": 0, "caption_boundary": {"x2": 732.347191704644, "y1": 508.7799072265625, "x1": 426.3152652316623, "y2": 633.3471086290148}, "name": "1", "caption_text": "Figure 1: The architecture of BENTO. The BENTO back end stores the description files of various tools (e.g., pre-trained NLP models), processes static contents of the application and handles compilation of the user-defined pipelines. The CodaLab back end stores the datasets (bundles) and executes computational jobs. The two back end servers are brought behind a single domain name using a reverse proxy server.", "figure_type": "Figure", "uri": null, "page_height": 0, "figure_boundary": {"x2": 719.0, "y1": 321.0, "x1": 434.0, "y2": 486.0}, "page": 0, "dpi": 0}, {"page_width": 0, "caption_boundary": {"x2": 732.3478698730469, "y1": 386.1104753282335, "x1": 99.57083596123589, "y2": 477.46950785319007}, "name": "2", "caption_text": "Figure 2: BENTO Web Interface. The interface can be roughly divided into three parts from left to right: tool panel, canvas panel and worksheet panel. The tool panel lists the current available tools organized in a tree view. The canvas panel contains the flowchart of the current pipeline. Every node represents a tool or dataset and each connection indicates the data flow in the pipeline.3 This figure shows an example of the pipeline for entity and relation extraction. The worksheet panel displays the content of the CodaLab worksheet such as bundles and their UUIDs.", "figure_type": "Figure", "uri": null, "page_height": 0, "figure_boundary": {"x2": 724.0, "y1": 91.0, "x1": 103.0, "y2": 365.0}, "page": 2, "dpi": 0}, {"page_width": 0, "caption_boundary": {"x2": 732.2227478027344, "y1": 246.32301330566406, "x1": 426.27360026041663, "y2": 387.49584621853296}, "name": "4", "caption_text": "Figure 4: The CodaLab commands generated from the pipeline in Figure 2. Two CodaLab commands are generated based on two steps in the pipeline, namely NER and relation extraction. The bundle dependency information is highlighted in orange and the shell commands are colorized in red. The results in the first step are saved in the variable bundle 0 (circled in blue squares), which is used as a bundle dependency in the command of the second step.", "figure_type": "Figure", "uri": null, "page_height": 0, "figure_boundary": {"x2": 725.0, "y1": 91.0, "x1": 429.0, "y2": 226.0}, "page": 3, "dpi": 0}, {"page_width": 0, "caption_boundary": {"x2": 405.56742350260413, "y1": 409.7313351101345, "x1": 99.57084655761719, "y2": 550.9027693006727}, "name": "3", "caption_text": "Figure 3: The CodaLang expression for the tool NER in Figure 2. The expression can be roughly split into three sections indicated by the dashed squares. The first section declares the arguments of this tool. As seen, the tool takes three bundles as inputs: config, input and pretrained model. The second section declares a constant code which is initialized with an existing bundle. The third section is a string template for generating the CodaLab command.", "figure_type": "Figure", "uri": null, "page_height": 0, "figure_boundary": {"x2": 403.0, "y1": 87.0, "x1": 100.0, "y2": 392.0}, "page": 3, "dpi": 0}], "error": null, "pdf": "/work/host-output/1173c04e3bc2978b79b59a78521d5c50325f85c7/2020.acl-demos.13.pdf", "dpi": 100}